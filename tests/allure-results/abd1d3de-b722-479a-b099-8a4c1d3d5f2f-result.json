{"name": "test_with_allure_step_should_issue_title_text", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 5s, while waiting for:\nbrowser.element(('css selector', '#query-builder-test')).type: eroshenkoam/allure-example\n\nReason: ElementNotInteractableException: element not interactable\n  (Session info: chrome=121.0.6167.184)\nScreenshot: file:///Users/aleksei/.selene/screenshots/1707944497457/1707944497457.png\nPageSource: file:///Users/aleksei/.selene/screenshots/1707944497457/1707944497457.html", "trace": "fn = <selene.core.wait.Command object at 0x102957520>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n../.venv/lib/python3.10/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../.venv/lib/python3.10/site-packages/selene/core/wait.py:61: in __call__\n    return self._fn(entity)\n../.venv/lib/python3.10/site-packages/selene/core/entity.py:451: in fn\n    webelement.send_keys(str(text))\n../.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1029569b0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...00019f4e7fa8 _pthread_start + 148\\\\n18  libsystem_pthread.dylib             0x000000019f4e2da0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=121.0.6167.184)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104cd67dc chromedriver + 4040668\nE       1   chromedriver                        0x0000000104cce9e0 chromedriver + 4008416\nE       2   chromedriver                        0x00000001049416a8 chromedriver + 284328\nE       3   chromedriver                        0x000000010497fb20 chromedriver + 539424\nE       4   chromedriver                        0x000000010497e39c chromedriver + 533404\nE       5   chromedriver                        0x000000010497aee8 chromedriver + 519912\nE       6   chromedriver                        0x00000001049bf048 chromedriver + 798792\nE       7   chromedriver                        0x000000010497974c chromedriver + 513868\nE       8   chromedriver                        0x000000010497a044 chromedriver + 516164\nE       9   chromedriver                        0x0000000104c9ba04 chromedriver + 3799556\nE       10  chromedriver                        0x0000000104c9fee4 chromedriver + 3817188\nE       11  chromedriver                        0x0000000104c84260 chromedriver + 3703392\nE       12  chromedriver                        0x0000000104ca0a2c chromedriver + 3820076\nE       13  chromedriver                        0x0000000104c7701c chromedriver + 3649564\nE       14  chromedriver                        0x0000000104cbde3c chromedriver + 3939900\nE       15  chromedriver                        0x0000000104cbdfb4 chromedriver + 3940276\nE       16  chromedriver                        0x0000000104cce660 chromedriver + 4007520\nE       17  libsystem_pthread.dylib             0x000000019f4e7fa8 _pthread_start + 148\nE       18  libsystem_pthread.dylib             0x000000019f4e2da0 thread_start + 8\n\n../.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_with_allure_step_should_issue_title_text():\n        with allure.step('Open github'):\n            browser.open('/')\n            allure.attach(browser.driver.get_screenshot_as_png(), name=\"Open GitHub\",\n                          attachment_type=allure.attachment_type.PNG)\n    \n        with allure.step('Search allure repository'):\n            s('.input-button').click()\n            s('#query-builder-test').type('eroshenkoam/allure-example').press_enter()\n            allure.attach(browser.driver.get_screenshot_as_png(), name=\"Search allure repository\",\n                          attachment_type=allure.attachment_type.PNG)\n>           s('#query-builder-test').type('eroshenkoam/allure-example').press_enter()\n\ntest_steps.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../.venv/lib/python3.10/site-packages/selene/core/entity.py:455: in type\n    self.wait.for_(\n../.venv/lib/python3.10/site-packages/selene/core/wait.py:142: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.wait.Command object at 0x102957520>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 5s, while waiting for:\nE                   browser.element(('css selector', '#query-builder-test')).type: eroshenkoam/allure-example\nE                   \nE                   Reason: ElementNotInteractableException: element not interactable\nE                     (Session info: chrome=121.0.6167.184)\nE                   Screenshot: file:///Users/aleksei/.selene/screenshots/1707944497457/1707944497457.png\nE                   PageSource: file:///Users/aleksei/.selene/screenshots/1707944497457/1707944497457.html\n\n../.venv/lib/python3.10/site-packages/selene/core/wait.py:140: TimeoutException"}, "steps": [{"name": "Open github", "status": "passed", "attachments": [{"name": "Open GitHub", "source": "553e26c9-bc12-449b-8de3-6f3148837a6e-attachment.png", "type": "image/png"}], "start": 1707944497473, "stop": 1707944500086}, {"name": "Search allure repository", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 5s, while waiting for:\nbrowser.element(('css selector', '#query-builder-test')).type: eroshenkoam/allure-example\n\nReason: ElementNotInteractableException: element not interactable\n  (Session info: chrome=121.0.6167.184)\nScreenshot: file:///Users/aleksei/.selene/screenshots/1707944497457/1707944497457.png\nPageSource: file:///Users/aleksei/.selene/screenshots/1707944497457/1707944497457.html\n\n", "trace": "  File \"/Users/aleksei/PycharmProjects/qa_guru_python_10_9/tests/test_steps.py\", line 18, in test_with_allure_step_should_issue_title_text\n    s('#query-builder-test').type('eroshenkoam/allure-example').press_enter()\n  File \"/Users/aleksei/PycharmProjects/qa_guru_python_10_9/.venv/lib/python3.10/site-packages/selene/core/entity.py\", line 455, in type\n    self.wait.for_(\n  File \"/Users/aleksei/PycharmProjects/qa_guru_python_10_9/.venv/lib/python3.10/site-packages/selene/core/wait.py\", line 142, in for_\n    return self._decorator(self)(logic)(fn)\n  File \"/Users/aleksei/PycharmProjects/qa_guru_python_10_9/.venv/lib/python3.10/site-packages/selene/core/wait.py\", line 140, in logic\n    raise self._hook_failure(failure)\n"}, "attachments": [{"name": "Search allure repository", "source": "fab17620-3a1b-4bb4-b6a9-abb2645d0939-attachment.png", "type": "image/png"}], "start": 1707944500086, "stop": 1707944505725}], "start": 1707944497473, "stop": 1707944505728, "uuid": "e5087154-c28f-471f-b95c-550be8e7c666", "historyId": "724f06ca3453cf97f0a9dd51705eed96", "testCaseId": "724f06ca3453cf97f0a9dd51705eed96", "fullName": "test_steps#test_with_allure_step_should_issue_title_text", "labels": [{"name": "suite", "value": "test_steps"}, {"name": "host", "value": "MacBook-Air-Aleksej.local"}, {"name": "thread", "value": "54266-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_steps"}]}